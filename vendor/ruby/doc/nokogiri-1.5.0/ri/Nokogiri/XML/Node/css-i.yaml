--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Search this node for CSS <tt>rules</tt>. <tt>rules</tt> must be one or more CSS selectors. For example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  node.css('title')\n  node.css('body h1.bold')\n  node.css('div + p.green', 'div#one')\n"
- !ruby/struct:SM::Flow::P 
  body: "A hash of namespace bindings may be appended. For example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  node.css('bike|tire', {'bike' =&gt; 'http://schwinn.com/'})\n"
- !ruby/struct:SM::Flow::P 
  body: "Custom CSS pseudo classes may also be defined. To define custom pseudo classes, create a class and implement the custom pseudo class you want defined. The first argument to the method will be the current matching NodeSet. Any other arguments are ones that you pass in. For example:"
- !ruby/struct:SM::Flow::VERB 
  body: "  node.css('title:regex(&quot;\\w+&quot;)', Class.new {\n    def regex node_set, regex\n      node_set.find_all { |node| node['some_attribute'] =~ /#{regex}/ }\n    end\n  }.new)\n"
- !ruby/struct:SM::Flow::P 
  body: Note that the CSS query string is case-sensitive with regards to your document type. That is, if you're looking for &quot;H1&quot; in an HTML document, you'll never find anything, since HTML tags will match only lowercase CSS queries. However, &quot;H1&quot; might be found in an XML document, where tags names are case-sensitive (e.g., &quot;H1&quot; is distinct from &quot;h1&quot;).
full_name: Nokogiri::XML::Node#css
is_singleton: false
name: css
params: " css *rules, [namespace-bindings, custom-pseudo-class]\n"
visibility: public
